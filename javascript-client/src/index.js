/**
 * Chirp API
 * API for a social network with donations.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Currency', 'model/Donation', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/Message', 'model/Message1', 'model/MessagesDonation', 'api/DefaultApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Currency'), require('./model/Donation'), require('./model/InlineResponse200'), require('./model/InlineResponse2001'), require('./model/Message'), require('./model/Message1'), require('./model/MessagesDonation'), require('./api/DefaultApi'));
  }
}(function(ApiClient, Currency, Donation, InlineResponse200, InlineResponse2001, Message, Message1, MessagesDonation, DefaultApi) {
  'use strict';

  /**
   * API_for_a_social_network_with_donations_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var ChirpApi = require('index'); // See note below*.
   * var xxxSvc = new ChirpApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new ChirpApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new ChirpApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new ChirpApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Currency model constructor.
     * @property {module:model/Currency}
     */
    Currency: Currency,
    /**
     * The Donation model constructor.
     * @property {module:model/Donation}
     */
    Donation: Donation,
    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200: InlineResponse200,
    /**
     * The InlineResponse2001 model constructor.
     * @property {module:model/InlineResponse2001}
     */
    InlineResponse2001: InlineResponse2001,
    /**
     * The Message model constructor.
     * @property {module:model/Message}
     */
    Message: Message,
    /**
     * The Message1 model constructor.
     * @property {module:model/Message1}
     */
    Message1: Message1,
    /**
     * The MessagesDonation model constructor.
     * @property {module:model/MessagesDonation}
     */
    MessagesDonation: MessagesDonation,
    /**
     * The DefaultApi service constructor.
     * @property {module:api/DefaultApi}
     */
    DefaultApi: DefaultApi
  };

  return exports;
}));
